/****************************************************************************
   
    OS/A65 Version 2.0.0
    lib6502 common filter code 

    Copyright (C) 2019 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

fileloop .(
	; first file
	lda (argp),y
	bne ok
	
	ldx #STDIN
	jsr docopy
	jmp ende
donext
ok	tya
	clc
	adc argp
	sta argp
	bcc l1
	inc argp+1
l1
#iflused beforenext
	jsr beforenext
#endif	
	lda argp
	ldy argp+1

	jsr docat
	bcs ende

	; skip par
	ldy #0
l2	lda (argp),y
	beq next
	iny
	bne l2
next	; check next par
	iny
	lda (argp),y
	bne donext
	; AC == 0
ende 	rts
	.)

#iflused showerr

showerr .(
	bcc noerr
	php
	pha
	cmp #E_OK
	beq noprint
	cmp #E_EOF
	beq noprint

	jsr ecrlfout
	lda argp
	ldy argp+1
	jsr estrout
	lda #":"
	jsr ecout	
	pla
	pha
	jsr strerror
	jsr estrout
	jsr ecrlfout
noprint
	pla
	plp
noerr
	rts

ecrlfout
	lda #13
	jsr ecout
	lda #10
ecout	ldx #STDERR
	jmp fputc

	.zero
zp	.word 0
	.text
estrout	sta zp
	sty zp+1
	ldy #0
es1	lda (zp),y
	beq ese
	jsr ecout
	iny
	bne es1
ese	rts
	.)
#endif

#iflused dataloop

dataloop .(
rdloop
        lda #<inbuf
        sta frdat
        lda #>inbuf
        sta frdat+1
        lda #<BUFLEN
        sta frdat+2
        lda #>BUFLEN
        sta frdat+3
        lda #<frdat
        ldy #>frdat
        ldx fileno
        sec
        jsr fread
        php
        pha

        ; compute write len by subtracting the read position from the 
        ; read buffer length
        lda #<BUFLEN
        sec
        sbc frdat+2
        sta frdat+2     ; write len lo
        lda #>BUFLEN
        sbc frdat+3
        sta frdat+3     ; write len hi
        ora frdat+2     ; did we actually read anything?
        beq nowrite     ; no
        ; write buffer start
        lda #<inbuf
        sta frdat
        lda #>inbuf
        sta frdat+1

wrloop  
	jsr writeout
        bcs wrerr
        lda frdat+2
        ora frdat+3
        bne wrloop
nowrite
        pla
        plp
        bcs rderr
        jmp rdloop

wrerr   tay
        pla             ; ignore read status
        pla
        tya

rderr   cmp #E_EOF
        bne rde2
        lda #E_OK
        clc
        .byt $24        ; skip sec
rde2    sec
        php
        pha
        ldx fileno
        cpx #STDIN
        beq r1
        jsr fclose
r1      pla
        plp
        rts
	.)

#endif

