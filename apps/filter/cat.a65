/****************************************************************************
   
    OS/A65 Version 2.0.0
    lib6502 cat program

    Copyright (C) 2020 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

#include "lib6502.i65"

#define	BUFLEN	1024

main	.(
	.zero
argp	.word 0
	.text

	jsr getopts
	bcc first

	lda #<usagetxt
	ldy #>usagetxt
	jmp strout

first	jsr crlfout
	jmp fileloop

	.data
usagetxt
	.asc 13,10, "Usage:"
	.asc 13,10, "  cat [file1] [file2] ... "
	.asc 13,10, "Prints the given files (or stdin if no file given) "
	.asc "to stdout"
	.byt 13, 10, 0

	; no options (so far)
optsflg
optslst	.byt 0

	.bss
fileno	.byt 0
frdat	.word 0,0
buf	.dsb BUFLEN
	.text

docat	ldx #OPEN_RD
	jsr fopen
	bcc docopy
	rts
docopy  stx fileno
rdloop
	lda #<buf
	sta frdat
	lda #>buf
	sta frdat+1
	lda #<BUFLEN
	sta frdat+2
	lda #>BUFLEN
	sta frdat+3
	lda #<frdat
	ldy #>frdat
	ldx fileno
	sec
	jsr fread
	php
	pha

	; compute write len by subtracting the read position from the 
	; read buffer length
	lda #<BUFLEN
	sec
	sbc frdat+2
	sta frdat+2	; write len lo
	lda #>BUFLEN
	sbc frdat+3
	sta frdat+3	; write len hi
	ora frdat+2	; did we actually read anything?
	beq nowrite	; no
	; write buffer start
	lda #<buf
	sta frdat
	lda #>buf
	sta frdat+1

wrloop	lda #<frdat
	ldy #>frdat
	ldx #STDOUT
	sec
	jsr fwrite
	bcs wrerr
	lda frdat+2
	ora frdat+3
	bne wrloop
nowrite
	pla
	plp
	bcs rderr
	jmp rdloop

wrerr	tay
	pla		; ignore read status
	pla
	tya
jsr hexout
tya
rderr	cmp #E_EOF
	bne rde2
	lda #E_OK
	clc
	.byt $24	; skip sec
rde2	sec
	php
	pha
	ldx fileno
	cpx #STDIN
	beq r1
	jsr fclose
r1	pla
	plp
	rts

#include "loop.a65"
#include "../common.a65"
	.)

