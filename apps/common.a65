/****************************************************************************
   
    OS/A65 Version 2.0.0
    Common code for lib6502-using programs
    Code is only included if label is defined, so include as last entry

    Copyright (C) 2019 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

/* 
 * Exported labels are:
 *
 * 	getopts	- parse command line options
 *			in: a/y pointer to cmdline options
 *			refs: argp    - zeropage ptr
 *			      optslst - zero-terminated string of option chars
 *			      optsflg - list of option bytes (pre-filled with zero)
 *					in the same order as optslst
 *					will be set to $ff when option is set
 *			out: c=0	no error
 *			     y 		on c=0, (argp),y points to either next arg or zerobyte
 *			     c=1 ac="?"	print help
 *			     c=1 	other unknown option
 *
 *	parsebyte - parse an int command line parameter into a byte
 *			in: argp      - pointer to string
 *			    y         - pointer in string where value starts
 *			out: c=1      - parse error
 *			     c=0      - parse ok
 *			     Y        - pointer to terminating zerobyte after arg
 *			     AC	      - value
 *			ref: BIN      - temporary value
 *
 *	strout - print a string on stdout
 *			in: a/y pointer to zero-terminated string
 *			refs: strp    - zeropage ptr (will be defined if not def'd)
 *
 *	hexout - print a hex byte
 *			in: a value
 * 	crlfout - print cr/lf on stdout
 *	spout - print a space on stdout
 *	stdout - print a character on stdout
 *			in: a value to be printed
 *
 *	wordout - print integer value in a/y (using word2bcd, bcdout)
 *			(print with variable length, i.e. without filler)
 *			in: a/y	      - 16 bit integer (unsigned)
 *			
 *	bcdout - print out value from BCD, using space as filler
 *			in: BCD       - Address of BCD value
 *			    y         - number of decimal digits to print up to
 *	bcd0out - print out value from BCD, using "0" as filler
 *		(same as bcdout)
 *
 *	long2bcd - convert a long value to BCD
 *			in: BIN       - Address of 4 byte integer value
 *			    BCD	      - Address of 5 byte BCD buffer for output
 *			out: value in BCD
 *
 *	word2bcd - convert a 2-byte value to BCD
 *			in: BIN       - Address of 2 byte integer value
 *			    BCD	      - Address of 3 byte BCD buffer for output
 *			out: value in BCD
 *
 *	byte2bcd - convert a byte value to BCD
 *			in: AC	      - byte to convert
 *			out: BCD      - address of 2 byte BCD buffer for output
 *
 *	iswhite	- check if character in AC is whitespace
 *			in: AC	      - byte to check
 *			out: Z	      - beq is whitespace
 */

#iflused getopts

	; parse command line options
	; uses argp/+1
getopts	.(
	sta argp
	sty argp+1

	ldy #0
skip	lda (argp),y
	beq opts
	iny
	bne skip
opts	iny
argloop	lda (argp),y
	beq argend
	cmp #"-"
	bne argend	; arg must start with "-"
nexto	iny
	lda (argp),y	
	bne check	; only "-" means next arg is not an option
	iny 		; point to either next arg or zerobyte
	bne argend	; always
check 	; check option
#ifldef optslst
	cmp #"?"
	beq help
	ldx #0
optchk	lda optslst,x
	beq argerr	; end of list - not found, thus error
	cmp (argp),y
	beq found
	inx
	bne optchk
found	dec optsflg,x
#ifldef optsadh
	lda optsadh,x
	beq nexto	; loop when no callback
	iny		; point to param
	lda (argp),y
	bne c
	iny
	lda (argp),y
	beq argerr	; long parameter expected, but none provided
c	jsr chklong
	bcc opts
#else
	bne nexto	; always
#endif /* optsadh */
#endif /* optslst */
help	
argerr 	sec		; acc contains "?" for help, zero for error
	rts
argend	clc
	rts

#ifldef optsadh
chklong	; optsadl/-adh contains the address of a check routine -1
	; (argp),y points to the parameter to be checked
	; must return c=1 for error or c=0 for ok
	; when c=0, (argp),y must point to zero terminator
	; after the parameter
	; 
	lda optsadh,x
	pha
	lda optsadl,x
	pha
	rts
#endif

	.)

#if 0
	; sample code how to check a long parameter
pa     tya 
       pha
       ldy #0
pa1    lda partxt,y
       beq pa2
       jsr stdout
       iny
       bne pa1
pa2    pla
       tay
pa4    lda (argp),y
       beq pa3
       jsr stdout
       iny
       bne pa4
pa3    jsr crlfout
       clc
       rts

partxt 	.asc 13,10,"Parameter A:",0
optslst .asc "abc",0
optsflg .byt 0,0,0
optsadh .byt >pa-1,0,0
optsadl .byt <pa-1,0,0
#endif 

#endif	/* getopts */

/***********************************************************/

#iflused parsebyte

parsebyte .(
	lda #0
	sta BIN
nextb
	lda (argp),y
	beq end
	; multiply BIN by 10
	asl BIN
	bcs overflow
	lda BIN
	asl BIN
	bcs overflow
	asl BIN
	bcs overflow
	adc BIN
	bcs overflow
	sta BIN
	lda (argp),y
	and #$0f
	adc BIN
	bcs overflow
	sta BIN
	iny
	bne nextb
overflow
end
	lda BIN
	rts
	.)

#endif

/***********************************************************/

#iflused wordout

wordout	.(
	sta BIN
	sty BIN+1
	jsr word2bcd
	ldy #5
	lda BCD+2
	bne out 
	dey
	lda BCD+1
	and #$f0
	bne out
	dey
	lda BCD+1
	bne out
	dey
	lda BCD
	and #$f0
	bne out
	dey
out	jmp bcdout
	.)

#endif

/***********************************************************/

#iflused long2bcd

; algorithm adapted from http://www.6502.org/source/integers/hex2dec-more.htm

long2bcd .(
	SED		; Switch to decimal mode
	LDA #0		; Ensure the result is clear
	STA BCD+0
	STA BCD+1
	STA BCD+2
	STA BCD+3
	STA BCD+4

	LDX #32		; The number of source bits
CNVBIT:	ASL BIN+0	; Shift out one bit
	ROL BIN+1
	ROL BIN+2
	ROL BIN+3
	LDA BCD+0	; And add into result
	ADC BCD+0
	STA BCD+0
	LDA BCD+1	; propagating any carry
	ADC BCD+1
	STA BCD+1
	LDA BCD+2	; ... thru whole result
	ADC BCD+2
	STA BCD+2
	LDA BCD+3	; ... thru whole result
	ADC BCD+3
	STA BCD+3
	LDA BCD+4	; ... thru whole result
	ADC BCD+4
	STA BCD+4
	DEX		; And repeat for next bit
	BNE CNVBIT
	CLD		; Back to binary
	RTS
	.)
#endif

#iflused word2bcd

word2bcd .(
	SED		; Switch to decimal mode
	LDA #0		; Ensure the result is clear
	STA BCD+0
	STA BCD+1
	STA BCD+2

	LDX #16		; The number of source bits
CNVBIT:	ASL BIN+0	; Shift out one bit
	ROL BIN+1
	LDA BCD+0	; And add into result
	ADC BCD+0
	STA BCD+0
	LDA BCD+1	; propagating any carry
	ADC BCD+1
	STA BCD+1
	LDA BCD+2	; ... thru whole result
	ADC BCD+2
	STA BCD+2
	DEX		; And repeat for next bit
	BNE CNVBIT
	CLD		; Back to binary
	RTS
	.)

#endif	/* wordbin2bcd */

#iflused byte2bcd

byte2bcd .(
	sed
	ldx #0
	stx BCD
	stx BCD+1
	ldx #8
cnvbit	asl
	pha
	lda BCD
	adc BCD
	sta BCD
	lda BCD+1
	adc BCD+1
	sta BCD+1
	pla
	dex
	bne cnvbit
	cld
	rts
	.)
#endif

/***********************************************************/

#iflused bcdout

; own algorithm. could probably be optimized using http://6502org.wikidot.com/software-output-decimal
; y is number of decimal digits to print up to
bcd0out .(
	lda #"0"
	.byt $2c
&bcdout 
	lda #" "
	sta fill
	tya
	lsr
	tay
	bcs nextd
	bcc decy
loop 	lda BCD,y
	lsr
	lsr
	lsr
	lsr
	jsr digit
nextd	tya
	bne show
	lda #"0"
	sta fill
show 	lda BCD,y
	jsr digit
decy	dey
	bpl loop
	rts

digit	and #15
	bne print
	lda fill
	jmp stdout
print 	ora #"0"
	jsr stdout
	lda #"0"
	sta fill
	rts

	.bss
fill	.byt 0
	.text	
	.)
#endif

/***********************************************************/
; string functions

#iflused strout

#ifldef strp
#else
	.zero
strp	.word
	.text
#endif /* strp */

strout	.(
	sta strp
	sty strp+1
	ldy #0
loop	lda (strp),y
	beq end
	jsr stdout
	iny
	bne loop
	inc strp+1
	bne loop
end	rts
	.)

#endif

#iflused hexout

hexout	.(
	pha
	lsr
	lsr
	lsr
	lsr
	jsr nibble
	pla
nibble	and #$0f
	clc
	adc #"0"
	cmp #"9"+1
	bcc nibok
	adc #6
nibok	jmp stdout
	.)

#endif

#iflused crlfout

crlfout .(

	lda #13
	jsr stdout
	lda #10
#iflused spout		/* if spout is used, skip following lda */
	.byt $2c
#endif	/* spout */
	.)
#endif	/* crlfout */

#iflused spout
	.(
&spout	lda #" "
	beq stdout
	.)
#endif	/* spout */
#iflused stdout

stdout	.(
	stx tx
	ldx #STDOUT
	sec
	jsr fputc
	ldx tx
	rts
	.data
tx	.byt 0
	.text
	.)
 
#endif

/***********************************************************/

#iflused iswhite

iswhite	.(		; return Z set when char in AC is whitespace
	cmp #" "
	beq r
	cmp #9		; tab
	beq r
	cmp #13		; cr
	beq r
	cmp #10		; lf
r	rts
	.)

#endif

