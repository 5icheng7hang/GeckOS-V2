/**************************************************************************
  kill.a65 -- kill utility for GeckOS

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

 **************************************************************************/

#include "kdefs.i65"
#include "kernel.i65"
#include "lib6502.i65"

	.zero

string  .word 0
argp    .word 0

  .data

sigcnt    .byt 0    ;signal table counter
sig       .byt 0    ;signal to send
pid       .byt 0    ;PID to kill
ysave	    .byt 0
trail     .byt $ff  ;flag: print trailing space after two hex chars
hexbyte   .byt 0, 0

  .text

  sta argp
  sty argp+1
  jsr parse
  bcc parseok
  lda #1
  jmp term
parseok
  lda sig
  cmp #SIG_KILL ;not implemented in kernel
  bne sendsig
  lda #$ff      ;return code (sent to parent with SIG_CHLD)
  ldx pid
  jsr KILL      ;kernel call, kills task and all threads
  clv
  bvc killdone
sendsig
  lda sig
  ldx pid
  sec
  jsr SENDSIG
  bcc killdone
  pha
  lda #<errmsg
  ldy #>errmsg
  jsr prstring
  pla
  pha
  jsr prhex
  pla
ckillsig
  cmp #E_ILLSIG ;The docs also mention E_ILLPID, but it doesn't exist.
  bne killdone  ;no signal description to print
  lda #<eillsig
  ldy #>eillsig
  jsr prstring
killdone
  lda #0
  jmp term

/* Parse command-line arguments. Return carry clear if OK, set otherwise. */
parse
  ldy #0
argv0
  lda (argp),y  ;past program name
  beq getargs
  iny
  bne argv0
getargs
  iny
  lda (argp),y
  bne ckargs
  lda #<usage   ;no arguments, abort
  ldy #>usage
  jsr prstring
  sec
  rts
ckargs
  tya
  clc
  adc argp
  sta argp      ;advance argp to first argument
  lda argp+1
  adc #0
  sta argp+1
  ldy #0
  lda (argp),y
  cmp #"-"      ;signal specified?
  beq ckarg0
  lda #$20      ;default to SIG_KILL
  sta sig
  bne readpid
ckarg0
  ldx #0
ckarg1
  lda (argp),y
  beq argdone
ckarg2
  cmp args,x
  bne trynext
  iny
  inx
  bne ckarg1
argdone
  ora args,x    ;both zero?
  beq found
trynext
  inc sigcnt    ;signal table counter
trynext2
  lda args,x    ;move .X to next in match list
  beq cknext
  inx
  bne trynext2
cknext
  inx           ;point to next arg or zero-terminator
  lda args,x
  beq notfound  ;end of match list
  ldy #0
  beq ckarg1
found
  iny           ;to PID
  tya
  clc
  adc argp
  sta argp
  lda argp+1
  adc #0
  sta argp+1
  ldx sigcnt
  lda signals,x
  sta sig  ;which signal to send
  bne readpid
notfound
  lda #<illsig
  ldy #>illsig
  jsr prstring
  lda argp
  ldy argp+1
  jsr prstring
  sec
  rts

readpid
  ldy #0
  lda (argp),y
  bne ckdollar
  lda #<usage   ;no PID argument, abort
  ldy #>usage
  jsr prstring
  sec
  rts
ckdollar
  cmp #"$"
  bne ckhex1
  iny
  lda (argp),y  ;ignore dollar
ckhex1
  jsr ckhexbyt
  bcs badpid
  jsr hex2bin
  asl
  asl
  asl
  asl
  sta pid       ;temp
ckhex2
  iny
  lda (argp),y
  beq badpid    ;too short
  jsr ckhexbyt
  bcs badpid
  jsr hex2bin
  ora pid
  sta pid
  iny
  lda (argp),y  ;too long?
  bne badpid
  jsr validpid
  bcs badpid
  rts

badpid
  lda #<illpid
  ldy #>illpid
  jsr prstring
  lda argp
  ldy argp+1
  jsr prstring
  sec
  rts

;binary PID in pid, check if valid PID number
validpid
  clc
  ldx #SEM_SENDBUF
  jsr PSEM
  jsr GETINFO
  ldx #0  ;index into GETINFO table
  ldy #0  ;count of GETINFO entries
valpid
  lda PCBUF+TN_PID,x
  cmp pid
  bne nxtinf
  clc  ;valid PID
  php
  bcc endpid
nxtinf
  iny
  cpy #ANZ_ENV
  bne nxtinf2
  sec
  php
  bcs endpid
nxtinf2
  txa
  clc
  adc #TN_SLEN
  tax
  bne valpid
endpid
  ldx #SEM_SENDBUF
  jsr VSEM
  plp
  rts           

/* Convert valid hex character in .A to binary. */
hex2bin
  cmp #"9"+1
  bcc num
  and #$0f      ;"A"-"F"
  clc
  adc #9
  rts
num
  and #$0f
  rts

/* Check whether byte in .A is a hex byte. .A, .Y preserved, .X destroyed. 
   Returns carry clear if hex byte, set otherwise. */
ckhexbyt
  tax
  cmp #"0"
  bcc nothex
  cmp #"9"+1
  bcs ckletter
  clc
  rts
ckletter
  and #$4f      ;to upper-case
  cmp #"A"
  bcc nothex
  cmp #"F"+1
  bcs nothex
  txa
  clc
  rts
nothex
  txa
  sec
  rts

/* Print a character to STDOUT (preserves .X) */
prchar
  tay
  txa
  pha
  tya
  ldx #STDOUT
  jsr fputc
  pla
  tax
  rts

/* Print a byte to STDOUT as two hex characters (preserves .X) */
prhex
  tay
  txa
  pha
  tya
  jsr tohex
  lda hexbyte
  ldx #STDOUT	
  jsr fputc
  lda hexbyte+1
  ldx #STDOUT	
  jsr fputc
  lda trail  ;print trailing space?
  beq nt
  lda #" "
  ldx #STDOUT
  jsr fputc
nt
  pla
  tax
  rts

/* Convert byte in .A to two hex chars at hexbyte (preserves .X and .Y) */
tohex 
  pha
  lsr
  lsr
  lsr
  lsr
  jsr tonib
  sta hexbyte
  pla
  jsr tonib
  sta hexbyte+1
  rts
tonib 
  and #$0f
  clc
  adc #"0"
  cmp #"9"+1
  bcc ok
  adc #"a"-"9"-2
ok
  rts
	
/* Print a string (address in .A/.Y) to STDOUT */
prstring
  sta string
  sty string+1
  ldy #0
pr1 
  sty ysave
  lda (string),y
  beq pr2
  ldx #STDOUT	
  jsr fputc
  bcs pr2
  ldy ysave
  iny
  bne pr1
pr2
  rts

.data

usage    .asc $0a,$0d,"Usage: kill [signal] PID",$0a,$0d
         .asc "(PID must be in hex)",$0a,$0d,0
args     .asc "-9",0  ;kill -9
         .asc "-SIG_KILL",0,"-SIG_BRK",0,"-SIG_USR1","-SIG_USR2",0
         .asc "-SIG_USR3",0,"-SIG_USR4",0,0
signals  .byt SIG_KILL,SIG_KILL,SIG_BRK, SIG_USR1,SIG_USR2,SIG_USR3,SIG_USR4
;               $20      $20      $10      $01      $02      $04      $08
illsig   .asc $0a,$0d,"Illegal signal: ",0
illpid   .asc $0a,$0d,"Illegal PID: ",0
sending  .asc $0a,$0d,"Sending ",0
topid    .asc " to PID ",0
errmsg   .asc $0a,$0d,"Error $",0
eillsig   .asc " (E_ILLSIG)",0
