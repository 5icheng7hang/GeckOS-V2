/****************************************************************************
   
    OS/A65 Version 2.0.0
    lib6502 ls program

    Copyright (C) 1997-1998 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

#include "lib6502.i65"
#include "kernel.i65"
#include "kdefs.i65"

main	.(

	.zero
argp	.word 0

	.data
cnt	.byt 0
zei	.byt 0

	.text
	jsr getopts

	; print header line
	.(
	lda #<it0
	ldy #>it0
	jsr STROUT
	bit optlong
	bmi noname
	lda #<it1
	ldy #>it1
	jsr STROUT
noname	lda #<it2
	ldy #>it2
	jsr STROUT
	bit optlong
	bpl noenv
	lda #<it3
	ldy #>it3
	jsr STROUT
noenv	lda #<it4
	ldy #>it4
	jsr STROUT
	.)

info	.(
#if 1 /* fdef NOMMU */
	  clc
	  ldx #SEM_SENDBUF
	  jsr PSEM
#endif
	  jsr GETINFO
infoloop  
          ldx zei
          lda PCBUF+TN_NTHREADS,x
	  bne print
	  bit optall
	  bmi print
	  jmp next
print
	  lda PCBUF+TN_PID,x
          jsr HEXOUT
          jsr SSPOUT
	bit optlong
	bmi skipfrontname
	jsr printname
i2        jsr SSPOUT
skipfrontname
          ldx zei
	lda PCBUF+TN_EXECADDR+1,x
	jsr HEXOUT
	lda PCBUF+TN_EXECADDR,x
	jsr HEXOUT
	jsr SSPOUT

          lda PCBUF+TN_NTHREADS,x
	  jsr HEXOUT
	  jsr SSPOUT

	bit optlong
	bpl noenv
          lda PCBUF+TN_ENV,x
	  jsr HEXOUT
	  jsr SSPOUT
          ldx zei
          lda PCBUF+TN_MEM,x
          jsr HEXOUT
          jsr SSPOUT
noenv
	  lda PCBUF+TN_PARENT,x
	  jsr HEXOUT
          jsr SSPOUT
	  lda PCBUF+TN_SIGMASK,x
          jsr HEXOUT
          jsr SSPOUT
	  lda PCBUF+TN_SIGNAL+1,x
	  jsr HEXOUT
	  lda PCBUF+TN_SIGNAL,x
	  jsr HEXOUT
	  jsr SSPOUT
          lda PCBUF+TN_STDIN,x
          jsr HEXOUT
          jsr SSPOUT
          lda PCBUF+TN_STDOUT,x
          jsr HEXOUT
          jsr SSPOUT
          lda PCBUF+TN_STDERR,x
          jsr HEXOUT
          jsr SSPOUT
	bit optlong
	bpl nextline
	jsr SSPOUT
	jsr SSPOUT
	jsr SSPOUT
	jsr printname
nextline
	jsr CRLFOUT
next	  lda zei
	  clc
	  adc #TN_SLEN
	  sta zei
          inc cnt
          lda cnt
          cmp #ANZ_ENV
          bcs ie
          jmp infoloop
ie        
#if 1 /* def NOMMU */
	  ldx #SEM_SENDBUF
	  jsr VSEM
#endif
	  clc
          rts
	.)

printname .(
          ldx zei
          lda PCBUF+TN_NTHREADS,x
          bne name
          ldx #TNAMLEN
i1        jsr SSPOUT
          dex
          bne i1
          beq i2
name      ldy #0
i4        lda PCBUF+TN_NAME,x
          beq i3
          jsr SEROUT
          iny
          inx
          cpy #TNAMLEN
          bcc i4
i3        cpy #TNAMLEN
          bcs i2
          jsr SSPOUT
          iny
          bne i3
i2	rts
	.)

	; parse command line options
	; uses argp/+1
getopts	.(
	sta argp
	sty argp+1

	ldy #0
skip	lda (argp),y
	beq opts
	iny
	bne skip
opts	iny
argloop	lda (argp),y
	beq argend
	cmp #"-"
	bne argend	; arg must start with "-"
next	iny
	lda (argp),y	
	bne check	; only "-" means next arg is not an option
	iny 		; point to either next arg or zerobyte
	bne argend
check 	; check option
	ldx #0
optchk	lda optlist,x
	beq argerr	; end of list - not found, thus error
	cmp (argp),y
	beq found
	inx
	bne optchk
found	lda #$ff
	sta optall,x
	bne next
argerr	sec
	rts
argend	clc
	rts
		
	; same order and len as optall/optlong/... option bytes above
optlist	.asc "al",0 
	; option list in same order/len as option args
&optall	.byt 0
&optlong .byt 0
	.)

STROUT	.(
	sta argp
	sty argp+1
	ldy #0
loop	lda (argp),y
	beq end
	jsr SEROUT
	iny
	bne loop
end	rts
	.)

&HEXOUT	.(
	pha
	lsr
	lsr
	lsr
	lsr
	jsr nibble
	pla
nibble	and #$0f
	clc
	adc #"0"
	cmp #"9"+1
	bcc nibok
	adc #6
nibok	jmp SEROUT
	.)

CRLFOUT .(
	.data
tx	.byt 0
	.text

	lda #13
	jsr SEROUT
	lda #10
	.byt $2c
&SSPOUT	lda #" "
&SEROUT
	stx tx
	ldx #STDOUT
	bne loop

&&OUT	stx tx
loop	pha
	jsr PUTC
	bcc ok
	cmp #E_NUL
	beq ok
	jsr YIELD
	pla
	jmp loop
ok	pla
	ldx tx
	rts
	.)
 
it0     .asc 13,10,"PID",0
it1	.asc " Name"
	.dsb TNAMLEN-4, 32
	.byt 0
it2	.asc "Exec Th", 0
it3	.asc " En Me", 0
it4	.asc " Pa Sm SigA In OutErr^M^J",0

	.)

